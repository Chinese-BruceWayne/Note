
%{
  #include <math.h>
  #include <stdio.h>
  int yylex (void);
  void yyerror (char const *);
  char output[128];
  int pos = 0;
%}


%define api.value.type {double}
%token NUM
%token minus
%token plus
%token mul
%token div
%token power
%token lp
%token rp

%left minus plus
%left mul div
%precedence NEG
%right power

%%
input:
  %empty
| input line
;

line:
  '\n'
| exp '\n'  { printf ("%s\n", output); output[pos=0] = '\0';}
;

exp:
  exp plus exp2        { output[pos++] = '+'; }
| exp minus exp2        { output[pos++] = '-'; }
| exp2
;

exp2:
  exp2 mul exp3        { output[pos++] = '*';}
| exp2 div exp3        { output[pos++] = '/';}
| exp3
;

exp3:
  lp exp rp {}
| NUM   {
    char temp [100];
    sprintf(temp, "%.10g", $1);
    for(int i=0; temp[i] != '\0'; i++)
      output[pos++] = temp[i];
  }
%%

#include <ctype.h>

int
yylex (void)
{
  int c;

  while ((c = getchar ()) == ' ' || c == '\t');

  if (c == '.' || isdigit (c))
    {
      ungetc (c, stdin);
      scanf ("%lf", &yylval);
      return NUM;
    }
  else
    {
      switch (c)
      {
        case '+': return plus;
        case '-': return minus;
        case '*': return mul;
        case '/': return div;
        case '^': return power;
        case '(': return lp;
        case ')': return rp;
        default: break;
      }
    }

  if (c == EOF)
    return 0;

  return c;
}

int
main (void)
{
  return yyparse ();
}
#include <stdio.h>

void
yyerror (char const *s)
{
  fprintf (stderr, "%s\n", s);
}
